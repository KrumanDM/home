[{"C:\\Users\\User\\Documents\\home\\src\\index.tsx":"1","C:\\Users\\User\\Documents\\home\\src\\reportWebVitals.ts":"2","C:\\Users\\User\\Documents\\home\\src\\s1-main\\App.tsx":"3","C:\\Users\\User\\Documents\\home\\src\\s2-homeworks\\hw10\\bll\\store.ts":"4","C:\\Users\\User\\Documents\\home\\src\\s2-homeworks\\hw01\\HW1.tsx":"5","C:\\Users\\User\\Documents\\home\\src\\s2-homeworks\\hw10\\bll\\loadingReducer.ts":"6","C:\\Users\\User\\Documents\\home\\src\\s2-homeworks\\hw12\\bll\\themeReducer.ts":"7","C:\\Users\\User\\Documents\\home\\src\\s2-homeworks\\hw01\\message\\Message.tsx":"8","C:\\Users\\User\\Documents\\home\\src\\s2-homeworks\\hw01\\message-sender\\MessageSender.tsx":"9","C:\\Users\\User\\Documents\\home\\src\\s2-homeworks\\hw01\\friend-message\\FriendMessage.tsx":"10","C:\\Users\\User\\Documents\\home\\src\\s2-homeworks\\hw02\\HW2.tsx":"11","C:\\Users\\User\\Documents\\home\\src\\s2-homeworks\\hw02\\affairs\\Affairs.tsx":"12","C:\\Users\\User\\Documents\\home\\src\\s2-homeworks\\hw02\\affairs\\affair\\Affair.tsx":"13"},{"size":730,"mtime":1671077311000,"results":"14","hashOfConfig":"15"},{"size":504,"mtime":1671077311000,"results":"16","hashOfConfig":"15"},{"size":626,"mtime":1678362630122,"results":"17","hashOfConfig":"15"},{"size":541,"mtime":1671077311000,"results":"18","hashOfConfig":"15"},{"size":2287,"mtime":1677781090338,"results":"19","hashOfConfig":"15"},{"size":458,"mtime":1671077311000,"results":"20","hashOfConfig":"15"},{"size":320,"mtime":1671077311000,"results":"21","hashOfConfig":"15"},{"size":1775,"mtime":1677836600763,"results":"22","hashOfConfig":"15"},{"size":2304,"mtime":1677782193741,"results":"23","hashOfConfig":"15"},{"size":1982,"mtime":1677837924518,"results":"24","hashOfConfig":"15"},{"size":4167,"mtime":1678379292777,"results":"25","hashOfConfig":"15"},{"size":2613,"mtime":1678359215688,"results":"26","hashOfConfig":"15"},{"size":1558,"mtime":1678363708917,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"lyqnyl",{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"31"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"38"},"C:\\Users\\User\\Documents\\home\\src\\index.tsx",[],[],[],"C:\\Users\\User\\Documents\\home\\src\\reportWebVitals.ts",[],[],"C:\\Users\\User\\Documents\\home\\src\\s1-main\\App.tsx",[],[],[],"C:\\Users\\User\\Documents\\home\\src\\s2-homeworks\\hw10\\bll\\store.ts",[],[],"C:\\Users\\User\\Documents\\home\\src\\s2-homeworks\\hw01\\HW1.tsx",["74"],[],"import React from 'react'\nimport Message from './message/Message'\nimport MessageSender from './message-sender/MessageSender'\nimport s2 from '../../s1-main/App.module.css'\nimport FriendMessage from './friend-message/FriendMessage'\nimport avatar from './avatar.png'\n\n/*\n* 1 - описать тип MessageType\n* 2 - описать тип MessagePropsType в файле Message.tsx\n* 3 - в файле Message.tsx отобразить приходящие данные\n* 4 - выполнить пункты 2, 3 в файле FriendMessage.tsx\n* 5 - сделать стили в соответствии с дизайном\n* */\n\n// нужно создать правильный тип вместо any\nexport type MessageType = {\n    id: number\n    user: PropsT \n    message: PropsTT\n}\ntype PropsT = {\n    avatar: string\n    name: string\n}\ntype PropsTT = {\n    text: string\n    time: string\n}\n\n\n// структуру объекта не менять\nexport const message0: MessageType = {\n    id: 0,\n    user: {\n        avatar: 'avatar', // можно менять\n        name: 'Some Name',  // можно менять\n    },\n    message: {\n        text: 'some textsome textsome textsome textsome textsome textsome text', // можно менять\n        time: '22:00', // можно менять\n    },\n}\nexport const friendMessage0: MessageType = {\n    id: 100,\n    user: {\n        avatar: 'avatar', // можно менять\n        name: 'Friend Name', // можно менять\n    },\n    message: {\n        text: 'зеркальное сообщение для тренировки css', // можно менять\n        time: '22:00', // можно менять\n    },\n}\n\nconst HW1 = () => {\n    return (\n        <div id={'hw1'}>\n            <div className={s2.hwTitle}>Homework #1</div>\n            <div className={s2.hw}>\n                {/*проверка отображения (не менять)*/}\n                <div>\n                    <Message message={message0} />\n                    <FriendMessage message={friendMessage0} />\n                </div>\n\n                {/*для автоматической проверки дз (не менять)*/}\n                <MessageSender M={Message} />\n            </div>\n        </div>\n    )\n}\n\nexport default HW1\n","C:\\Users\\User\\Documents\\home\\src\\s2-homeworks\\hw10\\bll\\loadingReducer.ts",[],[],"C:\\Users\\User\\Documents\\home\\src\\s2-homeworks\\hw12\\bll\\themeReducer.ts",[],[],"C:\\Users\\User\\Documents\\home\\src\\s2-homeworks\\hw01\\message\\Message.tsx",["75"],[],"import React from 'react'\nimport s from './Message.module.css'\nimport img from '../avatar.png'\n\n// нужно создать правильный тип вместо any\nexport type MessagePropsType = {\n    message: PropsType\n}\ntype PropsType = {\n    id: number\n\n    user: PropsT \n    message: PropsTT\n}\ntype PropsT = {\n    avatar: string\n    name: string\n}\ntype PropsTT = {\n    text: string\n    time: string\n}\n\n// нужно отобразить приходящие данные\nconst Message = (props: MessagePropsType) => {\n    return ( \n        \n        <div id={'hw1-message-' + props.message.id} className={s.message}>\n            <div className={s.imageAndText}>\n                <img\n                    id={'hw1-avatar-' + props.message.id}\n                    // создаёт студент\n                    src={img}\n                    //\n                />\n                <div className={s.text}>\n                    <div id={'hw1-name-' + props.message.id} className={s.name}>\n                        {/*создаёт студент*/}\n                        {props.message.user.name}\n                        \n                        \n                        {/**/}\n                    </div>\n                    <pre id={'hw1-text-' + props.message.id} className={s.messageText}>\n                        {/*создаёт студент*/}\n                        {props.message.message.text}\n                        {/**/}\n                    </pre>\n                </div>\n            </div>\n            <div id={'hw1-time-' + props.message.id} className={s.time}>\n                {/*создаёт студент*/}\n                {props.message.message.time}\n                {/**/}\n            </div>\n        </div>\n    )\n}\n\nexport default Message\n","C:\\Users\\User\\Documents\\home\\src\\s2-homeworks\\hw01\\message-sender\\MessageSender.tsx",[],[],"C:\\Users\\User\\Documents\\home\\src\\s2-homeworks\\hw01\\friend-message\\FriendMessage.tsx",["76"],[],"import React from 'react'\nimport s from './FriendMessage.module.css'\nimport img from '../avatar.png'\n\nexport type MessagePropsType = {\n    message: PropsType\n    \n}\ntype PropsType = {\n    id: number\n    user: PropsT \n    message: PropsTT\n}\ntype PropsT = {\n    avatar: string\n    name: string\n}\ntype PropsTT = {\n    text: string\n    time: string\n}\n\n// создать тип вместо any и отобразить приходящие данные\nconst FriendMessage = (props: MessagePropsType) => {\n    return (\n        <div \n            id={'hw1-friend-message-' + props.message.id}\n            className={s.friendMessage}\n        >\n            <div className={s.friendImageAndText}>\n                <img\n                    id={'hw1-friend-avatar-' + props.message.id}\n                    // создаёт студент\n                    src={img}\n                    //\n                />\n                <div className={s.friendText}>\n                    <div\n                        id={'hw1-friend-name-' + props.message.id}\n                        className={s.friendName}\n                    >\n                        {/*создаёт студент*/}\n                        {props.message.user.name}\n                        {/**/}\n                    </div>\n                    <pre\n                        id={'hw1-friend-text-' + props.message.id}\n                        className={s.friendMessageText}\n                    >\n                        {/*создаёт студент*/}\n                        {props.message.message.text}\n                        {/**/}\n                    </pre>\n                </div>\n            </div>\n            <div\n                id={'hw1-friend-time-' + props.message.id}\n                className={s.friendTime}\n            >\n                {/*создаёт студент*/}\n                {props.message.message.time}\n                {/**/}\n            </div>\n        </div>\n    )\n}\n\nexport default FriendMessage\n","C:\\Users\\User\\Documents\\home\\src\\s2-homeworks\\hw02\\HW2.tsx",["77"],[],"C:\\Users\\User\\Documents\\home\\src\\s2-homeworks\\hw02\\affairs\\Affairs.tsx",["78"],[],"import React from 'react'\nimport { useState } from 'react'\nimport Affair from './affair/Affair'\nimport {AffairType, FilterType} from '../HW2'\nimport s from './Affairs.module.css'\n\ntype AffairsPropsType = {\n    data: AffairType[] // need to fix any\n    setFilter: (filter: FilterType) => void\n    deleteAffairCallback: (_id: number) => void\n    filter: FilterType\n}\n\nfunction Affairs(props: AffairsPropsType) {\n    const setAll = () => {\n        // need to fix\n         return props.setFilter('all')\n    }\n    const setHigh = () => {\n        // need to fix\n         return props.setFilter('high')\n    }\n    const setMiddle = () => {\n        // need to fix\n        return props.setFilter('middle')\n    }\n    const setLow = () => {\n        // need to fix\n        return props.setFilter('low')\n    }\n\n    const cnAll = s.button + ' ' + s.all + (props.filter === 'all' ? ' ' + s.active : '')\n    const cnHigh = s.button + ' ' + s.high + (props.filter === 'high' ? ' ' + s.active : '')\n    const cnMiddle = s.button + ' ' + s.middle + (props.filter === 'middle' ? ' ' + s.active : '')\n    const cnLow = s.button + ' ' + s.low + (props.filter === 'low' ? ' ' + s.active : '')\n\n    const mappedAffairs = props.data.map((a: AffairType) => (\n        <Affair\n            key={a._id} // кеи ОБЯЗАТЕЛЬНЫ в 99% - так что лучше их писать всегда при создании компонент в мапе\n            affair={a}\n            deleteAffairCallback={props.deleteAffairCallback}\n        />\n        \n    ))\n\n    return (\n        <div>\n            <div className={s.buttonContainer}>\n                <button\n                    id={'hw2-button-all'}\n                    onClick={setAll}\n                    className={cnAll}\n                    \n                >\n                    All\n                </button>\n                <button\n                    id={'hw2-button-high'}\n                    onClick={setHigh}\n                    className={cnHigh}\n                >\n                    High\n                </button>\n                <button\n                    id={'hw2-button-middle'}\n                    onClick={setMiddle}\n                    className={cnMiddle}\n                >\n                    Middle\n                </button>\n                <button\n                    id={'hw2-button-low'}\n                    onClick={setLow}\n                    className={cnLow}\n                >\n                    Low\n                </button>\n            </div>\n            <div className={s.affairs}>{mappedAffairs}</div>\n        </div>\n    )\n}\n\nexport default Affairs\n","C:\\Users\\User\\Documents\\home\\src\\s2-homeworks\\hw02\\affairs\\affair\\Affair.tsx",["79"],[],"import React from 'react'\nimport { AffairType, deleteAffair } from '../../HW2'\nimport s from './Affair.module.css'\nimport s2 from '../Affairs.module.css'\n\ntype AffairPropsType = {\n    // key не нужно типизировать\n    affair: AffairType\n    deleteAffairCallback: (_id: number) => void // need to fix any\n}\n\nfunction Affair(props: AffairPropsType) {\n    const deleteCallback = () => {\n        // need to fix\n        props.deleteAffairCallback(props.affair._id)\n    }\n\n    const nameClass = s.name + ' ' + s2[props.affair.priority]\n    const buttonClass = s.closeButton + ' ' + s2[props.affair.priority]\n    const affairClass = s.affair + ' ' + s2[props.affair.priority]\n\n    return (\n        <div\n            id={'hw2-affair-' + props.affair._id}\n            className={affairClass}\n        >\n            <div id={'hw2-name-' + props.affair._id} className={nameClass}>\n                {/*создаёт студент*/}\n            {props.affair.name}\n                {/**/}\n            </div>\n            <div id={'hw2-priority-' + props.affair._id} hidden>\n                {props.affair.priority}\n            </div>\n            \n            <button\n                id={'hw2-button-delete-' + props.affair._id}\n                className={buttonClass}\n                // need to fix\n                onClick={deleteCallback}\n\n            >\n                {/*текст кнопки могут изменить студенты*/}\n                 X\n                {/**/}\n            </button>\n        </div>\n    )\n}\n\nexport default Affair\n",{"ruleId":"80","severity":1,"message":"81","line":6,"column":8,"nodeType":"82","messageId":"83","endLine":6,"endColumn":14},{"ruleId":"84","severity":1,"message":"85","line":30,"column":17,"nodeType":"86","endLine":35,"endColumn":19},{"ruleId":"84","severity":1,"message":"85","line":31,"column":17,"nodeType":"86","endLine":36,"endColumn":19},{"ruleId":"80","severity":1,"message":"87","line":95,"column":7,"nodeType":"82","messageId":"83","endLine":95,"endColumn":14},{"ruleId":"80","severity":1,"message":"88","line":2,"column":10,"nodeType":"82","messageId":"83","endLine":2,"endColumn":18},{"ruleId":"80","severity":1,"message":"89","line":2,"column":22,"nodeType":"82","messageId":"83","endLine":2,"endColumn":34},"@typescript-eslint/no-unused-vars","'avatar' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'courses' is assigned a value but never used.","'useState' is defined but never used.","'deleteAffair' is defined but never used."]